# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cHRay8bTZllIfr4kuIvNGUewr09_rlZd
"""

import cv2
from google.colab.patches import cv2_imshow
from matplotlib import pyplot as plt
import numpy as np
import math
import random



img = cv2.imread('/content/img.jpg',0)
plt.imshow(img, cmap='gray')
plt.axis('off')
plt.show()




img.shape




F = np.fft.fft2(img)
Fshift = np.fft.fftshift(F)
M,N = img.shape
H = np.zeros((M,N), dtype=np.float32)





#  Gausian Low Pass Filtering
D0 = 50
for u in range(M):
  for v in range(N):
    D = np.sqrt((u-M/2)**2 + (v-N/2)**2)
    H[u,v] = np.exp(-(D**2)/(2*(D0**2)))
plt.imshow(H, cmap='gray')
plt.axis('off')
plt.show()

Gshift = Fshift * H
G = np.fft.ifftshift(Gshift)
g = np.abs(np.fft.ifft2(G))
plt.imshow(g, cmap='gray')
plt.axis('off')
plt.show()







#Gausian High Pass Filtering
H = 1 - H
plt.imshow(H, cmap='gray')
plt.axis('off')
plt.show()
Gshift = Fshift * H
G = np.fft.ifftshift(Gshift)
g = np.abs(np.fft.ifft2(G))
plt.imshow(g, cmap='gray')
plt.axis('off')
plt.show()



#Conclusion: Gausian Low Pass Filtering is often preferred over Ideal Low pass Filter as it does not have ringing effects. Gausian High Pass Filtering gives the output which is very smoother and cleaned.