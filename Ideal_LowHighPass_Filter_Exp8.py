# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cHRay8bTZllIfr4kuIvNGUewr09_rlZd
"""

import cv2
from google.colab.patches import cv2_imshow
from matplotlib import pyplot as plt
import numpy as np
import math
import random




img = cv2.imread('/content/img.jpg')




img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.imshow(img)




img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
plt.imshow(img , cmap = "gray")



img.shape




F = np.fft.fft2(img)
Fshift = np.fft.fftshift(F)
M,N = img.shape
H = np.zeros((M,N), dtype=np.float32)



#IDEAL LOW PASS FILTERING
D0 = 50
for u in range(M):
    for v in range(N):
        D = np.sqrt((u-M/2)**2 + (v-N/2)**2)
        if D <= D0:
            H[u,v] = 1
        else:
                H[u,v] = 0
plt.imshow(H, cmap='gray')
plt.axis('off')
plt.show()
Gshift = Fshift * H
G = np.fft.ifftshift(Gshift)
g = np.abs(np.fft.ifft2(G))
plt.imshow(g, cmap='gray')
plt.axis('off')
plt.show()




#IDEAL HIGH PASS FILTERING
H = 1 - H
plt.imshow(H, cmap='gray')
plt.axis('off')
plt.show()
Gshift = Fshift * H
G = np.fft.ifftshift(Gshift)
g = np.abs(np.fft.ifft2(G))
plt.imshow(g, cmap='gray')
plt.axis('off')
plt.show()



#Conclusion: Low pass Filtering cuts off all high frequency component but it gives a ringing effect due to sharp cutoff. High pass Filtering retains the high frequency component and cutoffs the low frequency component