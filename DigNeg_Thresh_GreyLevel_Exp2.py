# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cHRay8bTZllIfr4kuIvNGUewr09_rlZd
"""

import cv2 
import numpy as np
import matplotlib.pyplot as plt



image = cv2.imread('img.jpg') 


img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)


img.shape



gray = cv2.imread('img.jpg', 0)







colored_negative = abs(255-img)

x,y=gray.shape
gray_negative=np.zeros((x,y))
for i in range(0,x):
    for j in range(0,y):
        gray_negative[i][j] = abs(255 - gray[i][j])











imgs = [img, gray, colored_negative, gray_negative]
title = ['coloured', 'gray', 'coloured-negative', 'gray-negative']


plt.subplot(2, 2, 1)
plt.title(title[0])
plt.imshow(imgs[0])
plt.xticks([])
plt.yticks([])

plt.subplot(2, 2, 2)
plt.title(title[1])
plt.imshow(imgs[1], cmap='gray')
plt.xticks([])
plt.yticks([])

plt.subplot(2, 2, 3)
plt.title(title[2])
plt.imshow(imgs[2])
plt.xticks([])
plt.yticks([])

plt.subplot(2, 2, 4)
plt.title(title[3])
plt.imshow(imgs[3], cmap='gray')
plt.xticks([])
plt.yticks([])

plt.show()











# Thresholding
image = cv2.imread('sealink.jpg', 0)
x,y=image.shape
z=np.zeros((x,y))
for i in range(0,x):
    for j in range(0,y):
        if(image[i][j]>50):
            z[i][j]=255
        else:
            z[i][j]=0
equ=np.hstack((image,z))
plt.title('Thresholding')
plt.imshow(equ,'gray')
plt.show()







# Gray Level Slicing 
import numpy as np
image=cv2.imread('sealink.jpg',0)
x,y=image.shape
z=np.zeros((x,y))
for i in range(0,x):
    for j in range(0,y):
        if(image[i][j]>50 and image[i][j]<150):
            z[i][j]=255
        else:
            z[i][j]=image[i][j]
equ=np.hstack((image,z))
plt.title('Original/Graylevel slicing with background')
plt.imshow(equ,'gray')
plt.show()









# Gray Level Without Background
image=cv2.imread('sealink.jpg',0)
x,y=image.shape
z=np.zeros((x,y))
for i in range(0,x):
    for j in range(0,y):
        if(image[i][j]>50 and image[i][j]<150):
            z[i][j]=255
        else:
            z[i][j]=0
equ=np.hstack((image,z))
plt.title('Original/Graylevel slicing without background')
plt.imshow(equ,'gray')
plt.show()