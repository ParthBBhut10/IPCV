# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cHRay8bTZllIfr4kuIvNGUewr09_rlZd
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt


#Read the image for erosion
img1= cv2.imread("e.png",0)


#Acquire size of the image
m,n= img1.shape 


#Show the image
plt.imshow(img1, cmap="gray")


# Define the structuring element
# k= 11,15,45 -Different sizes of the structuring element
k=15
SE= np.ones((k,k), dtype=np.uint8)
constant= (k-1)//2

print(SE)



#Define new image
imgErode= np.zeros((m,n), dtype=np.uint8)




#Erosion without using inbuilt cv2 function for morphology
for i in range(constant, m-constant):
    for j in range(constant,n-constant):
        temp= img1[i-constant:i+constant+1, j-constant:j+constant+1]
        product= temp*SE
        imgErode[i,j]= np.min(product)





plt.imshow(imgErode,cmap="gray")


#It is observed that the more portion from the original image is eroded as the size of the structuring element increases




#Read the image for dilation
img2= cv2.imread("text.png",0)


#Acquire size of the image
p,q= img2.shape



#Show the image
plt.imshow(img2, cmap="gray")



#Define new image to store the pixels of dilated image
imgDilate= np.zeros((p,q), dtype=np.uint8)



#Define the structuring element 
SED= np.array([[0,1,0], [1,1,1],[0,1,0]])
print(SED)



constant1=1




#Dilation operation without using inbuilt CV2 function
for i in range(constant1, p-constant1):
    for j in range(constant1,q-constant1):
        temp= img2[i-constant1:i+constant1+1, j-constant1:j+constant1+1]
        product= temp*SED
        imgDilate[i,j]= np.max(product)


  


plt.imshow(imgDilate,cmap="gray")



cv2.imwrite("Dilated.png", imgDilate)

#gaps filled by dialation operation